buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net"
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.0.+'
    }
}

plugins {
    id "org.sonarqube" version "2.6.2"
    id "maven-publish"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'idea'

repositories {
    mavenCentral()
    maven { url "http://dvs1.progwml6.com/files/maven" }
    maven { url "https://maven.theillusivec4.top/" }
    maven { url "https://maven.tterrag.com/" }
    maven { url = "https://modmaven.dev/" }
    maven { url "https://minecraft.curseforge.com/api/maven/"}
    maven { url "http://maven.blamejared.com/" }
}

group = 'sophisticatedbackpacks'
version = "${project.minecraft_version}-${project.mod_version}.${getBuildNumber()}${getStable()}"
archivesBaseName = 'sophisticatedbackpacks'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: 'snapshot', version: project.mcp_mappings
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            properties 'forge.logging.console.level': 'debug'
            properties 'mixin.env.disableRefMap': 'true'
            workingDirectory project.file('run')
            mods {
                sophisticatedbackpacks {
                    source sourceSets.main
                }
            }
        }
        server {
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            properties 'forge.logging.console.level': 'debug'
            properties 'mixin.env.disableRefMap': 'true'
            workingDirectory project.file('run')
            mods {
                sophisticatedbackpacks {
                    source sourceSets.main
                }
            }
        }
        data {
            properties 'forge.logging.markers': 'REGISTRIES,REGISTRYDUMP'
            properties 'forge.logging.console.level': 'debug'
            properties 'fml.earlyprogresswindow': 'false'
            properties 'mixin.env.disableRefMap': 'true'
            workingDirectory project.file('run')
            mods {
                sophisticatedbackpacks {
                    source sourceSets.main
                }
            }
            args '--mod', 'sophisticatedbackpacks', '--all', '--output', file('src/generated/resources/')
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    compileOnly fg.deobf("mezz.jei:jei-${jei_mc_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_mc_version}:${jei_version}")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
    compileOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-${top_mc_version}:${top_mc_version}-${top_version}:api")
    runtimeOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-${top_mc_version}:${top_mc_version}-${top_version}")
    compileOnly fg.deobf("vazkii.botania:Botania:${botania_version}:api")
    runtimeOnly fg.deobf("vazkii.botania:Botania:${botania_version}")
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
    compile fg.deobf("vazkii.autoreglib:AutoRegLib:${autoreglib_version}")
    compile fg.deobf("vazkii.quark:Quark:${quark_version}")
    compile fg.deobf("crafting-tweaks:CraftingTweaks_${crafting_tweaks_mc_version}:${crafting_tweaks_version}")
}

test {
    useTestNG()
}

task generateSources(type: Copy) {
    from 'src/replaceme/java'
    into "$buildDir/generated-src"
    filter { line -> line.replaceAll('@MOD_VERSION@', '${project.version}') }
}

jar {
    from('/') {
        include 'LICENSE'
    }

    manifest {
        attributes(["Specification-Title"     : "sophisticatedbackpacks",
                    "Specification-Vendor"    : "p3pp3rf1y",
                    "Specification-Version"   : "1",
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : "${archiveVersion}",
                    "Implementation-Vendor"   : "p3pp3rf1y",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
}

processResources {
    // Exclude datagenerator .cache directory
    exclude '.cache'
}

static def getBuildNumber() {
    if (System.getenv("GITHUB_RUN_NUMBER") != null) {
        return System.getenv("GITHUB_RUN_NUMBER").toString()
    }
    return ""
}

static def getStable() {
    if ((System.getenv("GITHUB_REF") == null || System.getenv("GITHUB_REF").endsWith("-dev"))) {
        return "-alpha"
    }
    return ""
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/P3pp3rF1y/SophisticatedBackpacks")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
                password = project.findProperty("gpr.key") ?: System.getenv("GPR_API_KEY")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            artifactId = 'sophisticatedbackpacks'
            from(components.java)
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "SophisticatedBackpacks"
        property "sonar.projectKey", "sophisticatedbackpacks:SophisticatedBackpacks"
    }
}

